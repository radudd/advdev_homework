#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  podRetention: "always()",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"
    def devProject = "${GUID}-dev-env"
    def prodProject = "${GUID}-prod-env"
    def appName = "openshift-tasks"
    def nexusUrl = "http://nexus.${GUID}-nexus.svc.cluster.local:8081"
    def sonarqubeUrl = "sonarqube-${GUID}-sonarqube.apps.na311.openshift.opentlc.com/"
    def ocpDockerRegistry = "docker-registry.default.svc:5000"
    def nexusDockerRegistry = "https://nexus-registry-f355-nexus.apps.na311.openshift.opentlc.com"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-" + currentBuild.number
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
            echo "Building version ${devTag}"
            // Execute Maven Build
            sh "${mvnCmd} clean package -DskipTests"
      }

      // The next two stages should run in parallel
      stage("Run Tests") {
        parallel {
            // Using Maven run the unit tests
            stage('Unit Tests') {
                  echo "Running Unit Tests"
                  // Execute Unit Tests
                  sh "${mvnCmd} test" 
            }

            // Using Maven to call SonarQube for Code Analysis
            stage('Code Analysis') {
                  echo "Running Code Analysis"
                  // Execute Sonarqube Tests
                  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarqubeUrl} -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}" 
            }
        }
      }
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        // Publish to Nexus
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusUrl}/repository/releases"
      }

      // Create the Build Config, if it doesn't exist
      stage('Build and Tag OpenShift Image') {
        echo "Creating BuildConfig resource for the application"
        // Build Image, tag Image
        openshift.withCluster() {
            openshift.withProject("${devProject}") {
                if (!openshift.selector('bc', "${appName}").exists()) {
                    openshift.newBuild("--binary=true --name=${appName}")
                }
            }
        }
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        openshift.withCluster() {
            openshift.withProject("${devProject}") {
                openshift.selector("bc", "${appName}").startBuild("--from-file=target/${appName}.war")
                // to add condition if builder pod successfully completes
                openshift.tag("${appName}:latest","${appName}:${devTag}")
            }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        // Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
        openshift.withCluster() {
            openshift.withProject("${devProject}") {
                if (openshift.selector("dc", "${appName}").exists()) {
                    openshift.set("image", "dc/${appName}", "${appName}=${dockerRegistry}/${devProject}/${appName}:${devTag}")
                    openshift.selector("dc","${appName}").rollout().latest()
                } else {
                    openshift.newApp("--image-stream=${appName}:${devTag}") 
                }
            }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // Copy image to Nexus container registry
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false \
                        --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat \
                        docker://${ocpDockerRegistry}/${devProject}/${appName}:${devTag} \
                        docker://${nexusDockerRegistry}/${appName}:${devTag}"

        // Tag the built image with the production tag.
        openshift.withCluster() {
            openshift.withProject("${devProject}") {
                openshift.tag("${devProject}/${appName}:${devTag}", "${devProject}/${appName}:${prodTag}")
            }
        }

      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def activeApp = ""
      def destApp   = ""

      stage('Blue/Green Production Deployment') {
        // Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        openshift.withCluster() {
            openshift.withProject("${prodProject}") {
                activeApp = openshift.selector("route", "${appName}").object().spec.to.name
                if (activeApp == "${appName}-green") {
                    destApp = "${appName}-blue"
                } else {
                    destApp = "${appName}-green"
                }

                echo "Active app: " + activeApp
                echo "Dest app: " + destApp

                openshift.set("image", "dc/${destApp}", "${destApp}=${ocpDockerRegistry}/${devProject}/${appName}:${prodTag}")

                def dcProd = openshift.selector("dc","${destApp}")
                dcProd.rollout().latest()

                def rcProdVersion = dcProd.object().status.latestVersion
                def rcProd = openshift.selector("rc","${destApp}-rcProdVersion").object()
                echo "Waiting for ${destApp} to be ready"
                while (rcProd.status.readyReplicas != rcProd.spec.replicas) {
                    sleep 10
                    rcProd = openshift.selector("rc", "${destApp}-${rcProdVersion}").object()
                }

            }
        }

      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // Execute switch
        openshift.withCluster() {
            openshift.withProject("${prodProject}") {
                openshift.patch("route/${appName} --patch={\"spec\": {\"to:\": {\"name\": \"${destApp}\"}}}")
            }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}